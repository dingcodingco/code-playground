name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  ECS_CLUSTER_STAGING: vibe-coding-staging
  ECS_CLUSTER_PRODUCTION: vibe-coding-production

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.vibecoding.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull Docker images from Docker Hub
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/vibe-coding-backend:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/vibe-coding-frontend:latest

      - name: Tag and push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Backend
          docker tag ${{ secrets.DOCKER_USERNAME }}/vibe-coding-backend:latest \
            $ECR_REGISTRY/vibe-coding-backend:staging
          docker push $ECR_REGISTRY/vibe-coding-backend:staging

          # Frontend
          docker tag ${{ secrets.DOCKER_USERNAME }}/vibe-coding-frontend:latest \
            $ECR_REGISTRY/vibe-coding-frontend:staging
          docker push $ECR_REGISTRY/vibe-coding-frontend:staging

      - name: Update ECS task definition - Backend
        id: task-def-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deploy/aws/ecs/task-definitions/backend-staging.json
          container-name: backend
          image: ${{ steps.login-ecr.outputs.registry }}/vibe-coding-backend:staging

      - name: Update ECS task definition - Frontend
        id: task-def-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deploy/aws/ecs/task-definitions/frontend-staging.json
          container-name: frontend
          image: ${{ steps.login-ecr.outputs.registry }}/vibe-coding-frontend:staging

      - name: Deploy Backend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          service: backend-service
          cluster: ${{ env.ECS_CLUSTER_STAGING }}
          wait-for-service-stability: true

      - name: Deploy Frontend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
          service: frontend-service
          cluster: ${{ env.ECS_CLUSTER_STAGING }}
          wait-for-service-stability: true

      - name: Run database migrations
        run: |
          aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER_STAGING }} \
            --task-definition vibe-coding-migration-staging \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.PRIVATE_SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_ID }}]}"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING }} \
            --paths "/*"

      - name: Health check
        run: |
          sleep 30
          curl -f https://staging-api.vibecoding.com/actuator/health || exit 1
          curl -f https://staging.vibecoding.com || exit 1

      - name: Run smoke tests
        run: |
          cd e2e
          npm ci
          ENVIRONMENT=staging npm run test:smoke

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://vibecoding.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Promote staging images to production
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Pull staging images
          docker pull $ECR_REGISTRY/vibe-coding-backend:staging
          docker pull $ECR_REGISTRY/vibe-coding-frontend:staging

          # Tag as production
          docker tag $ECR_REGISTRY/vibe-coding-backend:staging \
            $ECR_REGISTRY/vibe-coding-backend:production
          docker tag $ECR_REGISTRY/vibe-coding-frontend:staging \
            $ECR_REGISTRY/vibe-coding-frontend:production

          # Push production tags
          docker push $ECR_REGISTRY/vibe-coding-backend:production
          docker push $ECR_REGISTRY/vibe-coding-frontend:production

      - name: Create database backup
        run: |
          aws rds create-db-snapshot \
            --db-instance-identifier vibe-coding-production \
            --db-snapshot-identifier vibe-coding-production-$(date +%Y%m%d-%H%M%S)

      - name: Update ECS task definition - Backend
        id: task-def-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deploy/aws/ecs/task-definitions/backend-production.json
          container-name: backend
          image: ${{ steps.login-ecr.outputs.registry }}/vibe-coding-backend:production

      - name: Update ECS task definition - Frontend
        id: task-def-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deploy/aws/ecs/task-definitions/frontend-production.json
          container-name: frontend
          image: ${{ steps.login-ecr.outputs.registry }}/vibe-coding-frontend:production

      - name: Deploy Backend to ECS (Blue/Green)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          service: backend-service
          cluster: ${{ env.ECS_CLUSTER_PRODUCTION }}
          wait-for-service-stability: true
          codedeploy-appspec: deploy/aws/codedeploy/appspec.yml
          codedeploy-application: vibe-coding-backend
          codedeploy-deployment-group: production

      - name: Deploy Frontend to ECS (Blue/Green)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
          service: frontend-service
          cluster: ${{ env.ECS_CLUSTER_PRODUCTION }}
          wait-for-service-stability: true
          codedeploy-appspec: deploy/aws/codedeploy/appspec.yml
          codedeploy-application: vibe-coding-frontend
          codedeploy-deployment-group: production

      - name: Run database migrations
        run: |
          aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER_PRODUCTION }} \
            --task-definition vibe-coding-migration-production \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.PRIVATE_SUBNET_IDS_PROD }}],securityGroups=[${{ secrets.SECURITY_GROUP_ID_PROD }}]}"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }} \
            --paths "/*"

      - name: Health check
        run: |
          sleep 60
          curl -f https://api.vibecoding.com/actuator/health || exit 1
          curl -f https://vibecoding.com || exit 1

      - name: Run smoke tests
        run: |
          cd e2e
          npm ci
          ENVIRONMENT=production npm run test:smoke

      - name: Monitor deployment metrics
        run: |
          aws cloudwatch get-metric-statistics \
            --namespace AWS/ECS \
            --metric-name CPUUtilization \
            --dimensions Name=ServiceName,Value=backend-service Name=ClusterName,Value=${{ env.ECS_CLUSTER_PRODUCTION }} \
            --start-time $(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%S) \
            --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
            --period 60 \
            --statistics Average

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-staging, deploy-production]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback ECS services
        run: |
          # Determine environment
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            CLUSTER=${{ env.ECS_CLUSTER_PRODUCTION }}
          else
            CLUSTER=${{ env.ECS_CLUSTER_STAGING }}
          fi

          # Rollback backend
          aws ecs update-service \
            --cluster $CLUSTER \
            --service backend-service \
            --task-definition $(aws ecs describe-services \
              --cluster $CLUSTER \
              --services backend-service \
              --query 'services[0].deployments[1].taskDefinition' \
              --output text)

          # Rollback frontend
          aws ecs update-service \
            --cluster $CLUSTER \
            --service frontend-service \
            --task-definition $(aws ecs describe-services \
              --cluster $CLUSTER \
              --services frontend-service \
              --query 'services[0].deployments[1].taskDefinition' \
              --output text)

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "⚠️ Deployment Rollback Initiated",
              attachments: [{
                color: 'warning',
                text: `Environment: ${{ github.event.inputs.environment || 'staging' }}\nReason: Deployment health check failed`
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify Slack - Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "✅ Deployment Successful",
              attachments: [{
                color: 'good',
                text: `Environment: ${{ github.event.inputs.environment || 'staging' }}\nDeployed by: ${{ github.actor }}\nCommit: ${{ github.sha }}`
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack - Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "❌ Deployment Failed",
              attachments: [{
                color: 'danger',
                text: `Environment: ${{ github.event.inputs.environment || 'staging' }}\nFailed deployment by: ${{ github.actor }}\nCommit: ${{ github.sha }}`
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}