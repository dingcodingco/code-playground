plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'checkstyle'
}

group = 'com.codeplayground'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    // Database Migration
    implementation 'org.flywaydb:flyway-core'

    // Development Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Annotations
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'commons-io:commons-io:2.15.1'

    // Code Execution (Process 관리)
    implementation 'org.zeroturnaround:zt-exec:1.12'

    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:1.19.3"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// Checkstyle 설정
checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${projectDir}/checkstyle.xml")
    ignoreFailures = true
    maxWarnings = 100
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

// JAR 설정
jar {
    enabled = false
    archiveClassifier = ''
}

bootJar {
    enabled = true
    mainClass = 'com.codeplayground.CodePlaygroundApplication'
    archiveFileName = 'code-playground-backend.jar'
}

// 개발 편의를 위한 태스크
task copyGitHooks(type: Copy) {
    description 'Copies the git hooks from /git-hooks to the .git folder.'
    from "${rootDir}/git-hooks/"
    into "${rootDir}/.git/hooks/"
    fileMode 0755
}

build.dependsOn copyGitHooks

// 프로파일별 빌드
task buildDev(type: GradleBuild) {
    tasks = ['build']
    startParameter.systemPropertiesArgs['spring.profiles.active'] = 'local'
}

task buildProd(type: GradleBuild) {
    tasks = ['build']
    startParameter.systemPropertiesArgs['spring.profiles.active'] = 'prod'
}